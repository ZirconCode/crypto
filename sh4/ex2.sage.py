
# This file was *autogenerated* from the file ex2.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_1p0 = RealNumber('1.0'); _sage_const_655009 = Integer(655009); _sage_const_511229 = Integer(511229); _sage_const_1000 = Integer(1000)


def getRatio(n):
	# factors = list(factor(n-1)) # haha *facepalm*
	# s = [t[1] for t in factors if t[0] == 2][0] #probably ordered anyway...

	m = n - _sage_const_1 
	s = _sage_const_0 
	while m%_sage_const_2  == _sage_const_0 :
		m = m/_sage_const_2 
		s = s+_sage_const_1 
	print s

	d = (n-_sage_const_1 )/(_sage_const_2 **s)

	zns = [x for x in range(n) if gcd(x,n) == _sage_const_1 ]

	sn = []
	for x in zns:
		if Integer(x).powermod(d, n) == _sage_const_1 :
			sn.append(x)
		else:
			for j in range(s):
				if Integer(x).powermod(d*_sage_const_2 **j, n) == mod(-_sage_const_1 ,n):
					sn.append(x)
					break
	#print sn
	return _sage_const_1p0 *len(sn)/len(zns)
		



print getRatio(_sage_const_655009 )
print getRatio(_sage_const_511229 )
# 3.06100584652117e-6
# 0.0000206679894179894


# analysis

r = range(_sage_const_3 ,_sage_const_1000 ,_sage_const_2 )
l = []

for n in r:
	l.append(getRatio(n))
	print n

G = scatter_plot( zip(r,l) )
G.save('ex2plot.png')

# if we compare the plot from ex1 with that from ex2 directly, 
# we can see that of those ratios which are not prime (=1), they are much lower
# for a medium amount of cases. Therefore it is a much better method than the one from ex1.


