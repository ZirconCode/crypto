
# This file was *autogenerated* from the file ex1.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1p0 = RealNumber('1.0'); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_1000 = Integer(1000); _sage_const_352787 = Integer(352787)
n = _sage_const_352787 
#n = 43139

zns = [x for x in range(n) if gcd(x,n) == _sage_const_1 ]

print len(zns)

vn = [x for x in zns if Integer(x).powermod((n-_sage_const_1 )/_sage_const_2 , n) == mod(kronecker(x,n),n) ]

print len(vn)

print _sage_const_1p0 *len(vn)/len(zns)

# n1:
# 351600
# 2
# 5.68828213879408e-6

# n2:
# 42720
# 2
# 0.0000468164794007491


# analysis

r = range(_sage_const_1 ,_sage_const_1000 ,_sage_const_2 )
l = []

for n in r:
	zns = [x for x in range(n) if gcd(x,n) == _sage_const_1 ]	
	vn = [x for x in zns if Integer(x).powermod((n-_sage_const_1 )/_sage_const_2 , n) == mod(kronecker(x,n),n) ]
	l.append(_sage_const_1p0 *len(vn)/len(zns))
	print n

print l

G = scatter_plot( zip(r,l) )
G.save('ex1plot.png')

# looks like if it's not prime, the ratio decays somewhat exponentially
# which means for larger numbers n, the soloway strassen test has a higher chance of being correct


